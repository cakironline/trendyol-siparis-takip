import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
import requests
from requests.auth import HTTPBasicAuth

st.set_page_config(page_title="Trendyol SipariÅŸ Takibi", layout="wide")
st.title("ðŸ“¦ Trendyol Kargo Gecikme Takip Paneli")

SELLER_ID = "107703"
USERNAME = st.secrets["USERNAME"]
PASSWORD = st.secrets["PASSWORD"]

st.write("API baÄŸlantÄ±sÄ± iÃ§in bilgiler yÃ¼klendi âœ…")

def fetch_orders():
    now = datetime.now()
    start_date = int((now - timedelta(days=14)).timestamp() * 1000)
    end_date = int(now.timestamp() * 1000)

    url = f"https://apigw.trendyol.com/integration/order/sellers/{SELLER_ID}/orders"

    # --- TÃœM STATÃœLERÄ° Ã‡EKME ---
    statuses = ["Created", "Picking", "Invoiced"]
    all_orders = []

    for status in statuses:
        page = 0
        while True:
            params = {
                "status": status,
                "startDate": start_date,
                "endDate": end_date,
                "orderByField": "PackageLastModifiedDate",
                "orderByDirection": "DESC",
                "size": 200,
                "page": page
            }
            r = requests.get(url, auth=HTTPBasicAuth(USERNAME, PASSWORD), params=params)
            data = r.json().get("content", [])
            if not data:
                break
            all_orders.extend(data)
            page += 1

    if not all_orders:
        return pd.DataFrame(columns=[
            "SipariÅŸ No", "SipariÅŸ Tarihi", "Kargoya Verilmesi Gereken Tarih",
            "StatÃ¼", "FastDelivery", "Barcode", "ProductCode"
        ])

    rows = []
    for o in all_orders:
        lines = o.get("lines", [])

        # Bir sipariÅŸte birden fazla Ã¼rÃ¼n varsa, barcode ve productCode deÄŸerlerini virgÃ¼lle birleÅŸtir
        barcodes = ", ".join([str(line.get("barcode", "")) for line in lines if line.get("barcode")])
        product_codes = ", ".join([str(line.get("productCode", "")) for line in lines if line.get("productCode")])

        rows.append({
            "HB_SÄ°P_NO": f"{o.get('id', '')}_{o['orderNumber']}",  # Yeni sÃ¼tun
            "SipariÅŸ No": o["orderNumber"],
            "MÃ¼ÅŸteri AdÄ±": f"{o.get('customerFirstName', '')} {o.get('customerLastName', '')}".strip(),  # Ad Soyad birleÅŸimi
            "Package ID": o.get("id", ""),  # shipmentPackageId,
            "SipariÅŸ Tarihi": datetime.fromtimestamp(o["orderDate"]/1000),
            "Kargoya Verilmesi Gereken Tarih": datetime.fromtimestamp(o["agreedDeliveryDate"]/1000) + timedelta(hours=3),
            "StatÃ¼": o["status"],
            "FastDelivery": o.get("fastDelivery", False),
            "Barcode": barcodes,
            "ProductCode": product_codes
        })

    df = pd.DataFrame(rows)
    return df

# --- Verileri GÃ¼ncelle ---
if st.button("ðŸ”„ Verileri GÃ¼ncelle"):
    df = fetch_orders()
    st.session_state["data"] = df
    st.success("Veriler gÃ¼ncellendi âœ…")

# --- Veri GÃ¶sterimi ---
if "data" in st.session_state:
    df = st.session_state["data"]
    now = datetime.now()

    def durum_hesapla(row):
        now_guncel = now + timedelta(hours=3)
        kalan_saat = (row["Kargoya Verilmesi Gereken Tarih"] - now_guncel).total_seconds() / 3600

        if kalan_saat < 0:  # Gecikmede
            toplam_saat = -kalan_saat
            gun = int(toplam_saat // 24)
            saat = int(toplam_saat % 24)
            dakika = int((toplam_saat - int(toplam_saat)) * 60)
            return f"ðŸ”´ Gecikmede ({gun} GÃ¼n {saat} Saat {dakika} Dakika)"
        elif kalan_saat <= 3:
            saat = int(kalan_saat)
            dakika = int((kalan_saat - saat) * 60)
            return f"ðŸŸ  3 Saat Ä°Ã§inde ({saat} Saat {dakika} Dakika)"
        elif kalan_saat <= 6:
            saat = int(kalan_saat)
            dakika = int((kalan_saat - saat) * 60)
            return f"ðŸŸ¡ 6 Saat Ä°Ã§inde ({saat} Saat {dakika} Dakika)"
        elif kalan_saat <= 12:
            saat = int(kalan_saat)
            dakika = int((kalan_saat - saat) * 60)
            return f"ðŸŸ¢ 12 Saat Ä°Ã§inde ({saat} Saat {dakika} Dakika)"
        else:
            saat = int(kalan_saat)
            dakika = int((kalan_saat - saat) * 60)
            return f"âœ… SÃ¼resi Var ({saat} Saat {dakika} Dakika)"

    if not df.empty:
        df["Durum"] = df.apply(durum_hesapla, axis=1)
    else:
        st.info("APIâ€™den veri gelmedi veya hiÃ§ sipariÅŸ yok.")

    kategori_listesi = ["ðŸ”´ Gecikmede", "ðŸŸ  3 Saat Ä°Ã§inde", "ðŸŸ¡ 6 Saat Ä°Ã§inde", "ðŸŸ¢ 12 Saat Ä°Ã§inde", "âœ… SÃ¼resi Var"]
    tabs = st.tabs([f"{k} ({len(df[df['Durum'].str.contains(k)])})" for k in kategori_listesi])

    def highlight_fast_delivery(row):
        if row["FastDelivery"]:
            return ['background-color: #b6fcb6']*len(row)
        else:
            return ['']*len(row)

    for i, kategori in enumerate(kategori_listesi):
        with tabs[i]:
            df_k = df[df["Durum"].str.contains(kategori)].copy()
            if not df_k.empty:
                df_k = df_k.sort_values(by="SipariÅŸ Tarihi", ascending=True)  # En eski â†’ en yeni
                df_k.insert(0, "No", range(1, len(df_k) + 1))  # SÄ±ra numarasÄ± ekle
                st.dataframe(df_k.style.apply(highlight_fast_delivery, axis=1))
            else:
                st.info("Bu kategoride sipariÅŸ bulunmuyor.")

else:
    st.info("Verileri gÃ¶rmek iÃ§in yukarÄ±dan 'Verileri GÃ¼ncelle' butonuna tÄ±klayÄ±n.")
